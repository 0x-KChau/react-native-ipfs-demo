diff --git a/node_modules/ipfs-utils/src/http.js b/node_modules/ipfs-utils/src/http.js
index 6655e06..d1c885a 100644
--- a/node_modules/ipfs-utils/src/http.js
+++ b/node_modules/ipfs-utils/src/http.js
@@ -271,28 +271,30 @@ const ndjson = async function * (source) {
 }
 
 const streamToAsyncIterator = function (source) {
-  if (isAsyncIterator(source)) {
-    // Workaround for https://github.com/node-fetch/node-fetch/issues/766
-    if (Object.prototype.hasOwnProperty.call(source, 'readable') && Object.prototype.hasOwnProperty.call(source, 'writable')) {
-      const iter = source[Symbol.asyncIterator]()
-
-      const wrapper = {
-        next: iter.next.bind(iter),
-        return: () => {
-          source.destroy()
-
-          return iter.return()
-        },
-        [Symbol.asyncIterator]: () => {
-          return wrapper
-        }
-      }
-
-      return wrapper
-    }
-
-    return source
-  }
+  // if (isAsyncIterator(source)) {
+  //   // Workaround for https://github.com/node-fetch/node-fetch/issues/766
+  //   if (Object.prototype.hasOwnProperty.call(source, 'readable') && Object.prototype.hasOwnProperty.call(source, 'writable')) {
+  //     const iter = source[Symbol.asyncIterator]()
+
+  //     console.log('ipfs-utils http streamToAsyncIterator  node workaround');
+
+  //     const wrapper = {
+  //       next: iter.next.bind(iter),
+  //       return: () => {
+  //         source.destroy()
+
+  //         return iter.return()
+  //       },
+  //       [Symbol.asyncIterator]: () => {
+  //         return wrapper
+  //       }
+  //     }
+
+  //     return wrapper
+  //   }
+    
+  //   return source
+  // }
 
   const reader = source.getReader()
 
