diff --git a/node_modules/ipfs-http-client/src/add-all.js b/node_modules/ipfs-http-client/src/add-all.js
index b110010..8d99da7 100644
--- a/node_modules/ipfs-http-client/src/add-all.js
+++ b/node_modules/ipfs-http-client/src/add-all.js
@@ -20,6 +20,8 @@ module.exports = configure((api) => {
     const controller = new AbortController()
     const signal = anySignal([controller.signal, options.signal])
 
+    console.log('ipfs-http-client add-all', { input });
+
     const res = await api.post('add', {
       searchParams: toUrlSearchParams({
         'stream-channels': true,
@@ -33,6 +35,8 @@ module.exports = configure((api) => {
       )
     })
 
+    console.log('ipfs-http-client add-all', { res });
+
     for await (let file of res.ndjson()) {
       file = toCamel(file)
 
diff --git a/node_modules/ipfs-http-client/src/index.js b/node_modules/ipfs-http-client/src/index.js
index acd27d1..cdaf653 100644
--- a/node_modules/ipfs-http-client/src/index.js
+++ b/node_modules/ipfs-http-client/src/index.js
@@ -27,6 +27,8 @@ const urlSource = require('ipfs-utils/src/files/url-source')
  * @param {ClientOptions} options
  */
 function ipfsClient (options = {}) {
+  console.log('ipfs-http-client ipfsClient factory', options);
+
   return {
     add: require('./add')(options),
     addAll: require('./add-all')(options),
diff --git a/node_modules/ipfs-http-client/src/lib/core.js b/node_modules/ipfs-http-client/src/lib/core.js
index fb6b51e..15d73e5 100644
--- a/node_modules/ipfs-http-client/src/lib/core.js
+++ b/node_modules/ipfs-http-client/src/lib/core.js
@@ -25,6 +25,8 @@ const normalizeInput = (options = {}) => {
     options = { url: options }
   }
 
+  console.log('ipfs-http-client normalizeInput', { options, url: options.url, type: typeof options, isBoxedString: options instanceof String, toString: options?.toString(), stringType: typeof 'blah' === 'string' });
+
   const url = new URL(options.url)
   if (options.apiPath) {
     url.pathname = options.apiPath
@@ -109,10 +111,11 @@ class Client extends HTTP {
   constructor (options = {}) {
     /** @type {ClientOptions} */
     const opts = normalizeInput(options)
+    console.log('ipfs-http-client Client/HTTP constructor', { options, opts });
     super({
       timeout: parseTimeout(opts.timeout) || 60000 * 20,
       headers: opts.headers,
-      base: normalizeInput(opts.url).toString(),
+      base: opts.url.toString(),
       handleError: errorHandler,
       transformSearchParams: (search) => {
         const out = new URLSearchParams()
diff --git a/node_modules/ipfs-http-client/src/lib/multipart-request.browser.js b/node_modules/ipfs-http-client/src/lib/multipart-request.browser.js
index 550c85b..bcc3d9a 100644
--- a/node_modules/ipfs-http-client/src/lib/multipart-request.browser.js
+++ b/node_modules/ipfs-http-client/src/lib/multipart-request.browser.js
@@ -40,6 +40,8 @@ async function multipartRequest (source = '', abortController, headers = {}) {
       fieldName = `${fieldName}?${qs.join('&')}`
     }
 
+    console.log('multipart request browser', { fieldName, content, path});
+
     if (content) {
       formData.set(fieldName, content, encodeURIComponent(path))
     } else {
@@ -49,6 +51,8 @@ async function multipartRequest (source = '', abortController, headers = {}) {
     index++
   }
 
+  console.log('FormData', { formData });
+
   return {
     headers,
     body: formData
diff --git a/node_modules/ipfs-http-client/src/lib/multipart-request.js b/node_modules/ipfs-http-client/src/lib/multipart-request.js
index ba712e0..46ddf0a 100644
--- a/node_modules/ipfs-http-client/src/lib/multipart-request.js
+++ b/node_modules/ipfs-http-client/src/lib/multipart-request.js
@@ -64,12 +64,16 @@ async function multipartRequest (source = '', abortController, headers = {}, bou
     }
   }
 
-  return {
+  const result = {
     headers: merge(headers, {
       'Content-Type': `multipart/form-data; boundary=${boundary}`
     }),
     body: await toStream(streamFiles(source))
   }
+
+  console.log('multipart-request', { result });
+
+  return result;
 }
 
 module.exports = multipartRequest
diff --git a/node_modules/ipfs-http-client/src/pubsub/subscribe.js b/node_modules/ipfs-http-client/src/pubsub/subscribe.js
index ab5ee3c..f6216b8 100644
--- a/node_modules/ipfs-http-client/src/pubsub/subscribe.js
+++ b/node_modules/ipfs-http-client/src/pubsub/subscribe.js
@@ -13,6 +13,8 @@ module.exports = configure((api, options) => {
   return async (topic, handler, options = {}) => { // eslint-disable-line require-await
     options.signal = subsTracker.subscribe(topic, handler, options.signal)
 
+    console.log('ipfs-http-client subscribe enter', { topic });
+
     let done
     let fail
 
@@ -47,9 +49,12 @@ module.exports = configure((api, options) => {
 
           if (!response) {
             // if there was no response, the subscribe failed
+            console.log('ipfs-http-client subscribe no response');
             return
           }
 
+          console.log('ipfs-http-client subscribe response', { response });
+
           readMessages(response.ndjson(), {
             onMessage: handler,
             onEnd: () => subsTracker.unsubscribe(topic, handler),
@@ -67,6 +72,8 @@ module.exports = configure((api, options) => {
 async function readMessages (msgStream, { onMessage, onEnd, onError }) {
   onError = onError || log
 
+  console.log('ipfs-http-client subscribe readMessages enter');
+
   try {
     for await (const msg of msgStream) {
       try {
@@ -74,6 +81,8 @@ async function readMessages (msgStream, { onMessage, onEnd, onError }) {
           continue
         }
 
+        console.log('ipfs-http-client subscribe readMessages', { msg });
+
         onMessage({
           from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),
           data: uint8ArrayFromString(msg.data, 'base64pad'),
@@ -86,6 +95,7 @@ async function readMessages (msgStream, { onMessage, onEnd, onError }) {
       }
     }
   } catch (err) {
+    console.error('ipfs-http-client readMessages error', {error});
     // FIXME: In testing with Chrome, err.type is undefined (should not be!)
     // Temporarily use the name property instead.
     if (err.type !== 'aborted' && err.name !== 'AbortError') {
