diff --git a/node_modules/react-native/Libraries/Network/FormData.js b/node_modules/react-native/Libraries/Network/FormData.js
index bdb1da3..5f3c852 100644
--- a/node_modules/react-native/Libraries/Network/FormData.js
+++ b/node_modules/react-native/Libraries/Network/FormData.js
@@ -64,10 +64,31 @@ class FormData {
     this._parts.push([key, value]);
   }
 
+  set(key, value, fileName) {
+    const newParts = [];
+    let replaced = false;
+
+    fileName = fileName || value.name || 'blob';
+
+    this._parts.forEach((part) => {
+      if (part[0] === key) {
+        newParts.push([key, value, fileName]);
+        replaced = true;
+      } else {
+        newParts.push(part);
+      }
+    });
+
+    if (!replaced) {
+      newParts.push([key, value, fileName]);
+    }
+
+    this._parts = newParts;
+  }
+
   getParts(): Array<FormDataPart> {
-    return this._parts.map(([name, value]) => {
+    return this._parts.map(([name, value, fileName]) => {
       const contentDisposition = 'form-data; name="' + name + '"';
-
       const headers: Headers = {'content-disposition': contentDisposition};
 
       // The body part is a "blob", which in React Native just means
@@ -75,13 +96,24 @@ class FormData {
       // have a `name` and `type` attribute to specify filename and
       // content type (cf. web Blob interface.)
       if (typeof value === 'object' && value) {
-        if (typeof value.name === 'string') {
-          headers['content-disposition'] += '; filename="' + value.name + '"';
-        }
-        if (typeof value.type === 'string') {
-          headers['content-type'] = value.type;
+        headers['content-disposition'] += '; filename="' + fileName + '"';
+        headers['content-type'] = value.type || 'application/octet-stream';
+
+        const blob = {
+          uri: value.uri,
+          type: value.type,
+          name: value.name,
+        };
+
+        if (value instanceof Blob) {
+          blob.uri = URL.createObjectURL(value);
         }
-        return {...value, headers, fieldName: name};
+
+        return {
+          ...blob,
+          headers,
+          fieldName: name
+        };
       }
       // Convert non-object values to strings as per FormData.append() spec
       return {string: String(value), headers, fieldName: name};
